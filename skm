# Kanged From @TroJanZheX
import asyncio
import re
import ast
import math
import logging
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty

# Import your modules
from Script import script
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, make_inactive
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results
from database.filters_mdb import del_all, find_filter, get_filters
from info import ADMINS, AUTH_CHANNEL, CUSTOM_FILE_CAPTION, REQ_CHANNEL
from utils import get_size, is_subscribed, get_poster, search_gagala, temp, get_settings, save_group_settings

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}

# ------------------- Auto Filter & Manual Filter -------------------
@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    k = await manual_filters(client, message)
    if k == False:
        await auto_filter(client, message)

# ------------------- Callback Query Handler -------------------
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    # Close message
    if query.data == "close_data":
        await query.message.delete()
    
    # Start menu with Earn Money button
    elif query.data == "start":
        buttons = [
            [InlineKeyboardButton('üíù Subscribe YouTube Channel üíó', url=f'http://youtube.com/@Tech_VJ')],
            [InlineKeyboardButton('‚ôªÔ∏è Update Channel ‚ôªÔ∏è', url=f'https://t.me/VJ_Botz')],
            [InlineKeyboardButton('üí∞ Earn Money üí∞', url=f'https://t.me/your_earn_channel')],
            [InlineKeyboardButton('‚ÑπÔ∏è Help', callback_data='help'),
             InlineKeyboardButton('üòä About', callback_data='about')]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        await query.answer('Piracy Is Crime')
    
    # Help Menu
    elif query.data == "help":
        buttons = [
            [InlineKeyboardButton('Manual Filter', callback_data='manuelfilter'),
             InlineKeyboardButton('Auto Filter', callback_data='autofilter')],
            [InlineKeyboardButton('Connection', callback_data='coct'),
             InlineKeyboardButton('Extra Mods', callback_data='extra')],
            [InlineKeyboardButton('üè† Home', callback_data='start'),
             InlineKeyboardButton('üîÆ Status', callback_data='stats')]
        ]
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=enums.ParseMode.HTML
        )
    
    # About menu
    elif query.data == "about":
        buttons = [
            [InlineKeyboardButton('‚ô•Ô∏è Source', callback_data='source')],
            [InlineKeyboardButton('üè† Home', callback_data='start'),
             InlineKeyboardButton('üîê Close', callback_data='close_data')]
        ]
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(temp.B_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=enums.ParseMode.HTML
        )

# ------------------- Auto Filter Function -------------------
async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        settings = await get_settings(message.chat.id)
        if message.text.startswith("/"): return
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_chok(msg)
                else:
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message
        search, files, offset, total_results = spoll
    
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [[InlineKeyboardButton(text=f"[{get_size(file.file_size)}] {file.file_name}",
                                     url=f"https://t.me/{temp.U_NAME}?start={pre}_{file.file_id}")]
               for file in files]
    else:
        btn = [[InlineKeyboardButton(text=f"{file.file_name}",
                                     url=f"https://t.me/{temp.U_NAME}?start={pre}_{file.file_id}"),
                InlineKeyboardButton(text=f"{get_size(file.file_size)}",
                                     url=f"https://t.me/{temp.U_NAME}?start={pre}_{file.file_id}")]
               for file in files]

    # Extra buttons
    btn.insert(0, [InlineKeyboardButton("Update Channel", url="https://t.me/VJ_Botz")])
    btn.insert(1, [InlineKeyboardButton("YouTube Channel", url="https://youtube.com/@Tech_VJ")])
    btn.insert(2, [InlineKeyboardButton("üí∞ Earn Money üí∞", url="https://t.me/your_earn_channel")])

    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append([InlineKeyboardButton(text=f"üóì 1/{math.ceil(int(total_results)/10)}", callback_data="pages"),
                    InlineKeyboardButton(text="NEXT ‚è©", callback_data=f"next_{req}_{key}_{offset}")])
    else:
        btn.append([InlineKeyboardButton(text="üóì 1/1", callback_data="pages")])
    
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    TEMPLATE = settings['template']
    cap = TEMPLATE.format(query=search, title=imdb['title'], votes=imdb["votes"], **locals()) if imdb else f"Here is what i found for your query <u><i>{search}</u></i>"

    try:
        if imdb and imdb.get('poster'):
            await message.reply_photo(photo=imdb.get('poster'), caption=cap[:1024],
                                      reply_markup=InlineKeyboardMarkup(btn))
        else:
            await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))
    except Exception as e:
        logger.exception(e)
        await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))

# ------------------- Manual Filter Function -------------------
async def manual_filters(client, message, text=False):
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)
            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")
            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            await client.send_message(group_id, reply_text, disable_web_page_preview=True)
                        else:
                            button = eval(btn)
                            await client.send_message(group_id, reply_text, disable_web_page_preview=True,
                                                      reply_markup=InlineKeyboardMarkup(button), reply_to_message_id=reply_id)
                    elif btn == "[]":
                        await client.send_cached_media(group_id, fileid, caption=reply_text, reply_to_message_id=reply_id)
                    else:
                        button = eval(btn)
                        await message.reply_cached_media(fileid, caption=reply_text,
                                                        reply_markup=InlineKeyboardMarkup(button), reply_to_message_id=reply_id)
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
