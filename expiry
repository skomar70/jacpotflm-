import json
import time
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ---------------- Configuration ----------------
app = Client("my_bot")  # Your bot session name
ADMIN_ID = 123456789    # Admin Telegram ID
DATA_FILE = "bot_data.json"
VERIFICATION_EXPIRY = 3600  # 1 hour in seconds

# ---------------- Helper functions ----------------
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return {
            "feature_status": False,
            "earn_money_url": None,
            "verified_users": {}
        }

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

data = load_data()

# ---------------- Admin Commands ----------------
@app.on_message(filters.command("set_url") & filters.user(ADMIN_ID))
async def set_url(client, message):
    try:
        url = message.text.split(" ", 1)[1]
        data["earn_money_url"] = url
        save_data(data)
        await message.reply_text(f"✅ Earn Money URL set to:\n{url}")
    except IndexError:
        await message.reply_text("Usage: /set_url <URL>")

@app.on_message(filters.command("reset_url") & filters.user(ADMIN_ID))
async def reset_url(client, message):
    data["earn_money_url"] = None
    save_data(data)
    await message.reply_text("♻️ Earn Money URL has been reset.")

@app.on_message(filters.command("feature") & filters.user(ADMIN_ID))
async def toggle_feature(client, message):
    cmd = message.text.split(" ", 1)
    if len(cmd) != 2 or cmd[1].lower() not in ["on", "off"]:
        await message.reply_text("Usage: /feature on|off")
        return
    data["feature_status"] = True if cmd[1].lower() == "on" else False
    save_data(data)
    await message.reply_text(f"🎛️ Earn Money feature is now {'ON' if data['feature_status'] else 'OFF'}")

# ---------------- User Command ----------------
@app.on_message(filters.command("start"))
async def start(client, message):
    user_id = str(message.from_user.id)
    now = int(time.time())

    if not data["feature_status"]:
        await message.reply_text("⚠️ The Earn Money feature is currently OFF. Try later.")
        return

    verified_at = data.get("verified_users", {}).get(user_id)
    if verified_at and now - verified_at <= VERIFICATION_EXPIRY:
        if data["earn_money_url"]:
            await message.reply_text(f"✅ You are already verified! Here is your Earn Money link:\n{data['earn_money_url']}")
        else:
            await message.reply_text("⚠️ Admin hasn't set the Earn Money URL yet.")
        return

    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("Earn Money 💰", callback_data="verify_user")]
    ])
    await message.reply_text(
        "Welcome! Press the button below to Earn Money.",
        reply_markup=buttons
    )

# ---------------- Callback Handler ----------------
@app.on_callback_query()
async def handle_callback(client, callback_query):
    user_id = str(callback_query.from_user.id)
    now = int(time.time())

    if not data["feature_status"]:
        await callback_query.answer("⚠️ This feature is currently OFF.", show_alert=True)
        return

    if callback_query.data == "verify_user":
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("✅ I Verified", callback_data="get_video")],
            [InlineKeyboardButton("❌ Cancel", callback_data="cancel")]
        ])
        await callback_query.message.edit_text(
            "Please complete the verification to get the Earn Money link.",
            reply_markup=buttons
        )

    elif callback_query.data == "get_video":
        if not data["earn_money_url"]:
            await callback_query.message.edit_text("⚠️ Admin hasn't set the Earn Money URL yet.")
            return
        data["verified_users"][user_id] = now
        save_data(data)
        await callback_query.message.edit_text("✅ Verification passed! Here is your Earn Money link:")
        await callback_query.message.reply_text(data["earn_money_url"])

    elif callback_query.data == "cancel":
        await callback_query.message.edit_text("❌ Verification cancelled. You can try again anytime.")

# ---------------- Run Bot ----------------
app.run()
